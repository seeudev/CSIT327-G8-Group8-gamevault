# Generated by Django 5.2.6 on 2025-10-01 06:04

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name (e.g., Action, RPG, Strategy)', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this category')),
                ('icon', models.CharField(blank=True, help_text='Icon class or emoji for this category', max_length=50)),
                ('color', models.CharField(default='#667eea', help_text='Hex color code for this category', max_length=7)),
                ('slug', models.SlugField(help_text='URL-friendly version of the name', unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Game Categories',
                'db_table': 'game_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the game', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the game')),
                ('short_description', models.CharField(blank=True, help_text='Brief description for cards and previews', max_length=500)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price of the game in USD', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price before discount (for sale display)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('cover_image', models.ImageField(help_text='Main cover image for the game', upload_to='games/covers/')),
                ('screenshots', models.JSONField(blank=True, default=list, help_text='List of screenshot URLs')),
                ('trailer_url', models.URLField(blank=True, help_text='YouTube or other video trailer URL', null=True)),
                ('developer', models.CharField(help_text='Game developer company', max_length=100)),
                ('publisher', models.CharField(help_text='Game publisher company', max_length=100)),
                ('release_date', models.DateField(help_text='Official release date')),
                ('genre', models.CharField(help_text='Primary genre (e.g., Action, RPG, Strategy)', max_length=50)),
                ('tags', models.JSONField(blank=True, default=list, help_text='List of tags for filtering and search')),
                ('minimum_requirements', models.TextField(blank=True, help_text='Minimum system requirements')),
                ('recommended_requirements', models.TextField(blank=True, help_text='Recommended system requirements')),
                ('platforms', models.JSONField(default=list, help_text="Supported platforms (e.g., ['Windows', 'Mac', 'Linux'])")),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('coming_soon', 'Coming Soon'), ('discontinued', 'Discontinued')], default='active', help_text='Current status of the game', max_length=20)),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Number of keys available in stock')),
                ('total_sold', models.PositiveIntegerField(default=0, help_text='Total number of copies sold')),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Average user rating (0.00 - 5.00)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('5.00'))])),
                ('total_reviews', models.PositiveIntegerField(default=0, help_text='Total number of user reviews')),
                ('slug', models.SlugField(help_text='URL-friendly version of the title', max_length=200, unique=True)),
                ('meta_description', models.CharField(blank=True, help_text='Meta description for SEO', max_length=160)),
                ('featured', models.BooleanField(default=False, help_text='Whether this game is featured on the homepage')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this game entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_games', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(help_text='User who last updated this game', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_games', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'games',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GameKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='The actual game key/code', max_length=200, unique=True)),
                ('status', models.CharField(choices=[('available', 'Available'), ('sold', 'Sold'), ('reserved', 'Reserved'), ('invalid', 'Invalid')], default='available', help_text='Current status of this key', max_length=20)),
                ('platform', models.CharField(blank=True, help_text='Platform this key is for (e.g., Steam, Epic, Origin)', max_length=50)),
                ('region', models.CharField(blank=True, help_text='Region restriction (e.g., Global, US, EU)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sold_at', models.DateTimeField(blank=True, null=True)),
                ('game', models.ForeignKey(help_text='The game this key belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='keys', to='store.game')),
                ('sold_to', models.ForeignKey(blank=True, help_text='User who purchased this key', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchased_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'game_keys',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['status', 'featured'], name='games_status_41ab04_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['genre'], name='games_genre_ac3a20_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['price'], name='games_price_eccac7_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['average_rating'], name='games_average_ddcc08_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['created_at'], name='games_created_51ed57_idx'),
        ),
        migrations.AddIndex(
            model_name='gamekey',
            index=models.Index(fields=['game', 'status'], name='game_keys_game_id_0ae50b_idx'),
        ),
        migrations.AddIndex(
            model_name='gamekey',
            index=models.Index(fields=['status'], name='game_keys_status_d87a98_idx'),
        ),
    ]
